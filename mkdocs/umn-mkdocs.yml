# template
parameters:
- name: DocsPath
  type: string
- name: CleanDestination
  type: boolean
  default: true
- name: ArtifactName
  type: string
  default: ''
- name: FailOnTestFailure
  type: boolean
  default: true
- name: DefaultBranch
  type: string
  default: master
- name: DevDeploys
  type: boolean
  default: false

jobs:
- job: build
  steps:
  # - script: |
  #     sudo npm i -g markdownlint-cli
  #     markdownlint "**/*.md"
  #   continueOnError: true
  #   displayName: Run Markdownlint
  - script: |
      git clone https://github.com/FISHMANPET/markdownlint-cli.git --single-branch --branch junit "$(Agent.BuildDirectory)/markdownlint-cli"
      pushd "$(Agent.BuildDirectory)/markdownlint-cli"
      npm install
      popd
      node "$(Agent.BuildDirectory)/markdownlint-cli/markdownlint.js" -j "$(Common.TestResultsDirectory)/Test-$(Build.SourceVersion).xml" "docs/**/*.md"
    displayName: Markdown Lint
    continueOnError: true
  - task: PublishTestResults@2
    displayName: Publish Test Results
    inputs:
      testResultsFormat: JUnit
      testResultsFiles: '$(Common.TestResultsDirectory)/Test-$(Build.SourceVersion).xml'
      failTaskOnFailedTests: ${{ parameters.FailOnTestFailure }}
  - script: |
      echo -e "FROM squidfunk/mkdocs-material \n RUN pip install mkdocs-awesome-pages-plugin mkdocs-git-revision-date-localized-plugin" | docker build -t squidfunk/mkdocs-material -
      docker run --rm -v ${PWD}:/docs -v $(Build.ArtifactStagingDirectory):/docs/site squidfunk/mkdocs-material build
    displayName: mkdocs-material build
  - task: UsePythonVersion@0
    inputs:
      versionSpec: 3.x
      addToPath: true
  - task: PythonScript@0
    inputs:
      scriptSource: inline
      script: |
        import yaml, json, os, sys

        print(f"Python Version {sys.version}")

        with open("mkdocs.yml", "r") as f:
            meta = yaml.load(f, Loader=yaml.BaseLoader)
        meta_final = {key: meta.get(key, "").strip() for key in ["site_name", "site_description"]}
        with open(os.path.join("$(Build.ArtifactStagingDirectory)","metadata.json"), "w") as f:
            json.dump(meta_final, f)
    displayName: write site metadata to json
  - task: PythonScript@0
    inputs:
      scriptSource: inline
      script: |
        config = """<?xml version="1.0" encoding="UTF-8"?>
        <configuration>
            <system.webServer>
                <handlers>
                    <remove name="Python FastCGI" />
                </handlers>
            </system.webServer>
        </configuration>"""
        with open(os.path.join("$(Build.ArtifactStagingDirectory)","app.config"), "w", newline="\r\n") as f:
            f.write(config)
    displayName: write app.config
  - publish: $(Build.ArtifactStagingDirectory)
    artifact: ${{ coalesce(parameters.ArtifactName, parameters.DocsPath) }}
- template: deploy-docs.yml
  parameters:
    DocsPath: ${{ parameters.DocsPath }}
    CleanDestination: ${{ parameters.CleanDestination }}
    ArtifactName: ${{ coalesce(parameters.ArtifactName, parameters.DocsPath) }}
    Environment: Dev
    BuildCondition: and(succeeded(), eq(${{ parameters.DevDeploys }}, true), startsWith(variables['build.sourceBranchName'], 'dev'))
- template: deploy-docs.yml
  parameters:
    DocsPath: ${{ parameters.DocsPath }}
    CleanDestination: ${{ parameters.CleanDestination }}
    ArtifactName: ${{ coalesce(parameters.ArtifactName, parameters.DocsPath) }}
    Environment: Tst
    BuildCondition: or(and(succeeded(), not(startsWith(variables['build.sourceBranchName'], 'dev')), eq(${{ parameters.DevDeploys }}, true)), and(succeeded(), eq(${{ parameters.DevDeploys }}, false)))
- template: deploy-docs.yml
  parameters:
    DocsPath: ${{ parameters.DocsPath }}
    CleanDestination: ${{ parameters.CleanDestination }}
    ArtifactName: ${{ coalesce(parameters.ArtifactName, parameters.DocsPath) }}
    Environment: Prd
    BuildCondition: and(succeeded(), eq(variables['build.sourceBranchName'], '${{ parameters.DefaultBranch }}'))
