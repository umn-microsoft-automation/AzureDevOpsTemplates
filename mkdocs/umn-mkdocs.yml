# template
parameters:
- name: DocsPath
  type: string
  default: ''
- name: CleanDestination
  type: boolean
  default: true
- name: ArtifactName
  type: string
  default: ''
- name: FailOnTestFailure
  type: boolean
  default: true
- name: DefaultBranch
  type: string
  default: master
- name: DevDeploys
  type: boolean
  default: false
- name: BuildEngine
  type: string
  default: mkdocs
  values:
  - mkdocs
  - hugo

jobs:
- job: build
  steps:
  - bash: |
      cat << EOF > .markdownlint-cli2.jsonc
      {
        "outputFormatters": [
          [ "markdownlint-cli2-formatter-junit", { "name": "$(Common.TestResultsDirectory)/Test-$(Build.SourceVersion).xml" } ]
        ]
      }
      EOF

      cat .markdownlint-cli2.jsonc

      sudo npm install markdownlint-cli2 markdownlint-cli2-formatter-junit -g
      markdownlint-cli2 "docs/**/*.md"
      MDLINT=$?
      echo "return code: $MDLINT"
      case $MDLINT in
        0 | 1)
          exit 0
          ;;
        *)
          exit $MDLINT
          ;;
      esac
    displayName: Run Markdownlint
  - task: PublishTestResults@2
    displayName: Publish Test Results
    inputs:
      testResultsFormat: JUnit
      testResultsFiles: '$(Common.TestResultsDirectory)/Test-$(Build.SourceVersion).xml'
      failTaskOnFailedTests: ${{ parameters.FailOnTestFailure }}
  - ${{ if eq(parameters.BuildEngine, 'mkdocs') }}:
    - task: PipAuthenticate@1
      inputs:
        artifactFeeds: '$(System.TeamProject)/mkdocs-material-umn'
        onlyAddExtraIndex: true
    - script: |
        pip install mkdocs-material-umn mkdocs-material mkdocs-awesome-pages-plugin mkdocs-git-revision-date-localized-plugin mkdocs-markdownextradata-plugin
        mkdocs build -d $(Build.ArtifactStagingDirectory)
      displayName: mkdocs-material build
  - ${{ elseif eq(parameters.BuildEngine, 'hugo') }}:
    - script: |
        wget https://github.com/gohugoio/hugo/releases/download/v0.111.1/hugo_0.111.1_linux-arm64.deb
        ls
        sudo dpkig -i hugo*.deb
      displayName: Install Hugo
    - script: |
        hugo --destination $(Build.ArtifactStagingDirectory)
      displayName: hugo build
  - publish: $(Build.ArtifactStagingDirectory)
    artifact: ${{ coalesce(parameters.ArtifactName, variables['Build.DefinitionName']) }}
- template: deploy-docs.yml
  parameters:
    DocsPath: ${{ variables['Build.DefinitionName'] }}
    CleanDestination: ${{ parameters.CleanDestination }}
    ArtifactName: ${{ coalesce(parameters.ArtifactName, variables['Build.DefinitionName']) }}
    Environment: Dev
    BuildCondition: and(succeeded(), eq(${{ parameters.DevDeploys }}, true), startsWith(variables['build.sourceBranchName'], 'dev'))
- template: deploy-docs.yml
  parameters:
    DocsPath: ${{ variables['Build.DefinitionName'] }}
    CleanDestination: ${{ parameters.CleanDestination }}
    ArtifactName: ${{ coalesce(parameters.ArtifactName, variables['Build.DefinitionName']) }}
    Environment: Tst
    BuildCondition: or(and(succeeded(), not(startsWith(variables['build.sourceBranchName'], 'dev')), eq(${{ parameters.DevDeploys }}, true)), and(succeeded(), eq(${{ parameters.DevDeploys }}, false)))
- template: deploy-docs.yml
  parameters:
    DocsPath: ${{ variables['Build.DefinitionName'] }}
    CleanDestination: ${{ parameters.CleanDestination }}
    ArtifactName: ${{ coalesce(parameters.ArtifactName, variables['Build.DefinitionName']) }}
    Environment: Prd
    BuildCondition: and(succeeded(), eq(variables['build.sourceBranchName'], '${{ parameters.DefaultBranch }}'))
