# template
parameters:
- name: DocsPath
  type: string
  default: ''
- name: CleanDestination
  type: boolean
  default: true
- name: ArtifactName
  type: string
  default: ''
- name: FailOnTestFailure
  type: boolean
  default: true
- name: DefaultBranch
  type: string
  default: master
- name: DevDeploys
  type: boolean
  default: false

# variables:
#   ${{ if contains(parameters.DocsPath, 'DocsPath') }}:
#     templateDocsPath: ${{ variables['Build.DefinitionName'] }}
#   # - name: templateDocsPath
#   #   value: ${{ variables['Build.DefinitionName'] }}
#   #   readonly: true
#     templateArtifactName: ${{ coalesce(parameters.ArtifactName, variables['Build.DefinitionName']) }}
#   # - name: templateArtifactName
#   #   value: ${{ coalesce(parameters.ArtifactName, variables['Build.DefinitionName']) }}
#   #   readonly: true
#   ${{ else }}:
#     templateDocsPath: ${{ parameters.DocsPath }}
#   # - name: templateDocsPath
#   #   value: ${{ parameters.DocsPath }}
#   #   readonly: true
#     templateArtifactName: ${{ coalesce(parameters.ArtifactName, parameters.DocsPath) }}
#   # - name: templateArtifactName
#   #   value: ${{ coalesce(parameters.ArtifactName, parameters.DocsPath) }}
#   #   readonly: true


jobs:
- job: build
  steps:
  - ${{ if contains(parameters.docspath, 'DocsPath') }}:
    - bash: |
        echo "True"
        echo '${{ parameters.DocsPath }}'
        echo 'DocsPath'
        echo '${{ contains(parameters.docspath, 'DocsPath') }}'
        echo '${{ contains('lpt-public', 'DocsPath') }}'
        echo '${{ contains('ABCDE', 'BCD') }}'
        echo '${{ contains('ABCDE', 'ACE') }}'
        echo "DocsPath: ${{ variables['Build.DefinitionName'] }}"
        echo "ArtifactName: ${{ coalesce(parameters.ArtifactName, variables['Build.DefinitionName']) }}"
  - ${{ else }}:
    - bash: |
        echo "Else"
        echo '${{ parameters.DocsPath }}'
        echo 'DocsPath'
        echo '${{ contains(parameters.DocsPath, 'DocsPath') }}'
        echo "DocsPath: ${{ coalesce(parameters.DocsPath, variables['Build.DefinitionName']) }}"
        echo "ArtifactName: ${{ coalesce(parameters.ArtifactName, parameters.DocsPath, variables['Build.DefinitionName']) }}"
  - bash: |
      echo '$(Build.DefinitionName)'
      echo '${{ parameters.DocsPath }}'
      echo '${{ parameters.ArtifactName }}'
      # if [[ '${{ parameters.DocsPath }}' == *"DocsPath"* ]]; then exit 1; fi;
    displayName: Fail build if DocsPath is not set
  # - script: |
  #     sudo npm i -g markdownlint-cli
  #     markdownlint "**/*.md"
  #   continueOnError: true
  #   displayName: Run Markdownlint
  - script: |
      git clone https://github.com/FISHMANPET/markdownlint-cli.git --single-branch --branch junit "$(Agent.BuildDirectory)/markdownlint-cli"
      pushd "$(Agent.BuildDirectory)/markdownlint-cli"
      npm install
      popd
      node "$(Agent.BuildDirectory)/markdownlint-cli/markdownlint.js" -j "$(Common.TestResultsDirectory)/Test-$(Build.SourceVersion).xml" "docs/**/*.md"
    displayName: Markdown Lint
    continueOnError: true
  - task: PublishTestResults@2
    displayName: Publish Test Results
    inputs:
      testResultsFormat: JUnit
      testResultsFiles: '$(Common.TestResultsDirectory)/Test-$(Build.SourceVersion).xml'
      failTaskOnFailedTests: ${{ parameters.FailOnTestFailure }}
  - script: |
      pip install mkdocs-material mkdocs-awesome-pages-plugin mkdocs-git-revision-date-localized-plugin mkdocs-markdownextradata-plugin
      mkdocs build -d $(Build.ArtifactStagingDirectory)
    displayName: mkdocs-material build
  - publish: $(Build.ArtifactStagingDirectory)
    ${{ if contains(parameters.DocsPath, 'DocsPath') }}:
      artifact: ${{ coalesce(parameters.ArtifactName, variables['Build.DefinitionName']) }}
    ${{ else }}:
      artifact: ${{ coalesce(parameters.ArtifactName, parameters.DocsPath, variables['Build.DefinitionName']) }}
- template: deploy-docs.yml
  parameters:
    ${{ if contains(parameters.DocsPath, 'DocsPath') }}:
      DocsPath: ${{ variables['Build.DefinitionName'] }}
      ArtifactName: ${{ coalesce(parameters.ArtifactName, variables['Build.DefinitionName']) }}
    ${{ else }}:
      DocsPath: ${{ coalesce(parameters.DocsPath, variables['Build.DefinitionName']) }}
      ArtifactName: ${{ coalesce(parameters.ArtifactName, parameters.DocsPath, variables['Build.DefinitionName']) }}
    CleanDestination: ${{ parameters.CleanDestination }}
    Environment: Dev
    BuildCondition: and(succeeded(), eq(${{ parameters.DevDeploys }}, true), startsWith(variables['build.sourceBranchName'], 'dev'))
- template: deploy-docs.yml
  parameters:
    ${{ if contains(parameters.DocsPath, 'DocsPath') }}:
      DocsPath: ${{ variables['Build.DefinitionName'] }}
      ArtifactName: ${{ coalesce(parameters.ArtifactName, variables['Build.DefinitionName']) }}
    ${{ else }}:
      DocsPath: ${{ coalesce(parameters.DocsPath, variables['Build.DefinitionName']) }}
      ArtifactName: ${{ coalesce(parameters.ArtifactName, parameters.DocsPath, variables['Build.DefinitionName']) }}
    # DocsPath: $(templateDocsPath)
    CleanDestination: ${{ parameters.CleanDestination }}
    # ArtifactName: $(templateArtifactName)
    Environment: Tst
    BuildCondition: or(and(succeeded(), not(startsWith(variables['build.sourceBranchName'], 'dev')), eq(${{ parameters.DevDeploys }}, true)), and(succeeded(), eq(${{ parameters.DevDeploys }}, false)))
- template: deploy-docs.yml
  parameters:
    ${{ if contains(parameters.DocsPath, 'DocsPath') }}:
      DocsPath: ${{ variables['Build.DefinitionName'] }}
      ArtifactName: ${{ coalesce(parameters.ArtifactName, variables['Build.DefinitionName']) }}
    ${{ else }}:
      DocsPath: ${{ coalesce(parameters.DocsPath, variables['Build.DefinitionName']) }}
      ArtifactName: ${{ coalesce(parameters.ArtifactName, parameters.DocsPath, variables['Build.DefinitionName']) }}
    # DocsPath: $(templateDocsPath)
    CleanDestination: ${{ parameters.CleanDestination }}
    # ArtifactName: $(templateArtifactName)
    Environment: Prd
    BuildCondition: and(succeeded(), eq(variables['build.sourceBranchName'], '${{ parameters.DefaultBranch }}'))
