parameters:
- name: DocsPath
  type: string
- name: CleanDestination
  type: boolean
- name: ArtifactName
  type: string
- name: Environment
  type: string
- name: BuildCondition
  type: string

jobs:
- deployment: ${{ parameters.Environment }}_blob
  condition: ${{ parameters.BuildCondition }}
  dependsOn: build
  environment: ${{ parameters.Environment }}-Azure
  strategy:
    runOnce:
      deploy:
        steps:
          #- ${{ if eq(parameters.CleanDestination, true) }}:
          # - task: DeleteFiles@1
          #   inputs:
          #     SourceFolder: $(Pipeline.Workspace)
          #     Contents: ${{ parameters.ArtifactName }}
          - download: current
            artifact: ${{ parameters.ArtifactName }}
          - task: AzureCLI@2
            inputs:
              azureSubscription: docs-publish
              scriptType: bash
              scriptLocation: inlineScript
              failOnStandardError: true
              inlineScript: |
                export STORE_NAME="$(docs-storage-account)"
                echo "Storage Account Name: $STORE_NAME"
                export CONTAINER_NAME="${{ lower(parameters.Environment) }}-content"
                echo "Container Name: $CONTAINER_NAME"
                EXPIRY=`date -u -d "5 minutes" '+%Y-%m-%dT%H:%MZ'` \
                && export SAS_TOKEN=$( az storage container generate-sas \
                    --account-name $STORE_NAME \
                    --name $CONTAINER_NAME \
                    --expiry $EXPIRY \
                    --permissions acdlrw \
                    --auth-mode login \
                    --output tsv )
                echo "$(Pipeline.Workspace)/${{ parameters.DocsPath }}"
                echo "https://${STORE_NAME}.blob.core.windows.net/${CONTAINER_NAME}/${{ parameters.DocsPath }}/?${SAS_TOKEN}"
                azcopy sync \
                    "$(Pipeline.Workspace)/${{ parameters.DocsPath }}" \
                    "https://${STORE_NAME}.blob.core.windows.net/${CONTAINER_NAME}/${{ parameters.DocsPath }}/?${SAS_TOKEN}" \
                    --delete-destination=true

# - deployment: ${{ parameters.Environment }}_windows
#   condition: ${{ parameters.BuildCondition }}
#   dependsOn: build
#   environment:
#     name: ${{ parameters.Environment }}
#     resourceType: VirtualMachine
#     tags: windows
#   workspace:
#     clean: all
#   strategy:
#     rolling:
#       deploy:
#         steps:
#           #- ${{ if eq(parameters.CleanDestination, true) }}:
#           - task: DeleteFiles@1
#             inputs:
#               SourceFolder: $(Pipeline.Workspace)
#               Contents: ${{ parameters.ArtifactName }}
#           - download: current
#             artifact: ${{ parameters.ArtifactName }}
#           - task: CopyFiles@2
#             inputs:
#               SourceFolder: '$(Pipeline.Workspace)/${{ parameters.ArtifactName }}'
#               Contents: '**'
#               TargetFolder: 'C:\inetpub\wwwroot\${{ parameters.DocsPath }}'
#               CleanTargetFolder: ${{ parameters.CleanDestination }}
#               OverWrite: true

# - deployment: ${{ parameters.Environment }}_linux
#   condition: ${{ parameters.BuildCondition }}
#   dependsOn: build
#   environment:
#     name: ${{ parameters.Environment }}
#     resourceType: VirtualMachine
#     tags: linux
#   workspace:
#     clean: all
#   strategy:
#     rolling:
#       deploy:
#         steps:
#           #- ${{ if eq(parameters.CleanDestination, true) }}:
#           - task: DeleteFiles@1
#             inputs:
#               SourceFolder: $(Pipeline.Workspace)
#               Contents: ${{ parameters.ArtifactName }}
#           - download: current
#             artifact: ${{ parameters.ArtifactName }}
#           - task: CopyFiles@2
#             inputs:
#               SourceFolder: '$(Pipeline.Workspace)/${{ parameters.ArtifactName }}'
#               Contents: '**'
#               TargetFolder: '/var/www/html/${{ parameters.DocsPath }}'
#               CleanTargetFolder: ${{ parameters.CleanDestination }}
#               OverWrite: true
